/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export type MessageStruct = {
  sender: PromiseOrValue<string>;
  message: PromiseOrValue<string>;
};

export type MessageStructOutput = [string, string] & {
  sender: string;
  message: string;
};

export interface MockMessengerInterface extends utils.Interface {
  functions: {
    "getMessages()": FunctionFragment;
    "handleMessageReceived(bytes)": FunctionFragment;
    "messages(uint256)": FunctionFragment;
    "scribe()": FunctionFragment;
    "writeMessage(string)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getMessages"
      | "handleMessageReceived"
      | "messages"
      | "scribe"
      | "writeMessage"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getMessages",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "handleMessageReceived",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "messages",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "scribe", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "writeMessage",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "getMessages",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "handleMessageReceived",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "messages", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "scribe", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "writeMessage",
    data: BytesLike
  ): Result;

  events: {
    "MessageSent(address,string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "MessageSent"): EventFragment;
}

export interface MessageSentEventObject {
  sender: string;
  message: string;
}
export type MessageSentEvent = TypedEvent<
  [string, string],
  MessageSentEventObject
>;

export type MessageSentEventFilter = TypedEventFilter<MessageSentEvent>;

export interface MockMessenger extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MockMessengerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getMessages(overrides?: CallOverrides): Promise<[MessageStructOutput[]]>;

    handleMessageReceived(
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    messages(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string, string] & { sender: string; message: string }>;

    scribe(overrides?: CallOverrides): Promise<[string]>;

    writeMessage(
      _message: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  getMessages(overrides?: CallOverrides): Promise<MessageStructOutput[]>;

  handleMessageReceived(
    _data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  messages(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[string, string] & { sender: string; message: string }>;

  scribe(overrides?: CallOverrides): Promise<string>;

  writeMessage(
    _message: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getMessages(overrides?: CallOverrides): Promise<MessageStructOutput[]>;

    handleMessageReceived(
      _data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    messages(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string, string] & { sender: string; message: string }>;

    scribe(overrides?: CallOverrides): Promise<string>;

    writeMessage(
      _message: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "MessageSent(address,string)"(
      sender?: PromiseOrValue<string> | null,
      message?: null
    ): MessageSentEventFilter;
    MessageSent(
      sender?: PromiseOrValue<string> | null,
      message?: null
    ): MessageSentEventFilter;
  };

  estimateGas: {
    getMessages(overrides?: CallOverrides): Promise<BigNumber>;

    handleMessageReceived(
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    messages(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    scribe(overrides?: CallOverrides): Promise<BigNumber>;

    writeMessage(
      _message: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getMessages(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    handleMessageReceived(
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    messages(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    scribe(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    writeMessage(
      _message: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
