/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface MockDestinationInterface extends utils.Interface {
  functions: {
    "ethPriceInUsd()": FunctionFragment;
    "getEthPriceInUsd()": FunctionFragment;
    "getPayload()": FunctionFragment;
    "handleReceive(bytes)": FunctionFragment;
    "handleWebApi(bytes)": FunctionFragment;
    "payload()": FunctionFragment;
    "scribe()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "ethPriceInUsd"
      | "getEthPriceInUsd"
      | "getPayload"
      | "handleReceive"
      | "handleWebApi"
      | "payload"
      | "scribe"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "ethPriceInUsd",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getEthPriceInUsd",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPayload",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "handleReceive",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "handleWebApi",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(functionFragment: "payload", values?: undefined): string;
  encodeFunctionData(functionFragment: "scribe", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "ethPriceInUsd",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEthPriceInUsd",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPayload", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "handleReceive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "handleWebApi",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "payload", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "scribe", data: BytesLike): Result;

  events: {
    "PayloadReceived(uint256,uint256,int256,int256)": EventFragment;
    "WebAPIReceived(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "PayloadReceived"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WebAPIReceived"): EventFragment;
}

export interface PayloadReceivedEventObject {
  calledCount: BigNumber;
  blockNumber: BigNumber;
  amount0: BigNumber;
  amount1: BigNumber;
}
export type PayloadReceivedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber],
  PayloadReceivedEventObject
>;

export type PayloadReceivedEventFilter = TypedEventFilter<PayloadReceivedEvent>;

export interface WebAPIReceivedEventObject {
  ethPriceInUsd: BigNumber;
}
export type WebAPIReceivedEvent = TypedEvent<
  [BigNumber],
  WebAPIReceivedEventObject
>;

export type WebAPIReceivedEventFilter = TypedEventFilter<WebAPIReceivedEvent>;

export interface MockDestination extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MockDestinationInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ethPriceInUsd(overrides?: CallOverrides): Promise<[BigNumber]>;

    getEthPriceInUsd(overrides?: CallOverrides): Promise<[BigNumber]>;

    getPayload(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber]>;

    handleReceive(
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    handleWebApi(
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    payload(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        calledCount: BigNumber;
        blockNumber: BigNumber;
        amount0: BigNumber;
        amount1: BigNumber;
      }
    >;

    scribe(overrides?: CallOverrides): Promise<[string]>;
  };

  ethPriceInUsd(overrides?: CallOverrides): Promise<BigNumber>;

  getEthPriceInUsd(overrides?: CallOverrides): Promise<BigNumber>;

  getPayload(
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber]>;

  handleReceive(
    _data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  handleWebApi(
    _data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  payload(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      calledCount: BigNumber;
      blockNumber: BigNumber;
      amount0: BigNumber;
      amount1: BigNumber;
    }
  >;

  scribe(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    ethPriceInUsd(overrides?: CallOverrides): Promise<BigNumber>;

    getEthPriceInUsd(overrides?: CallOverrides): Promise<BigNumber>;

    getPayload(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber]>;

    handleReceive(
      _data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    handleWebApi(
      _data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    payload(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        calledCount: BigNumber;
        blockNumber: BigNumber;
        amount0: BigNumber;
        amount1: BigNumber;
      }
    >;

    scribe(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "PayloadReceived(uint256,uint256,int256,int256)"(
      calledCount?: null,
      blockNumber?: null,
      amount0?: null,
      amount1?: null
    ): PayloadReceivedEventFilter;
    PayloadReceived(
      calledCount?: null,
      blockNumber?: null,
      amount0?: null,
      amount1?: null
    ): PayloadReceivedEventFilter;

    "WebAPIReceived(uint256)"(ethPriceInUsd?: null): WebAPIReceivedEventFilter;
    WebAPIReceived(ethPriceInUsd?: null): WebAPIReceivedEventFilter;
  };

  estimateGas: {
    ethPriceInUsd(overrides?: CallOverrides): Promise<BigNumber>;

    getEthPriceInUsd(overrides?: CallOverrides): Promise<BigNumber>;

    getPayload(overrides?: CallOverrides): Promise<BigNumber>;

    handleReceive(
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    handleWebApi(
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    payload(overrides?: CallOverrides): Promise<BigNumber>;

    scribe(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    ethPriceInUsd(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getEthPriceInUsd(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPayload(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    handleReceive(
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    handleWebApi(
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    payload(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    scribe(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
