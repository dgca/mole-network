/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface UsingTellorInterface extends utils.Interface {
  functions: {
    "getDataAfter(bytes32,uint256)": FunctionFragment;
    "getDataBefore(bytes32,uint256)": FunctionFragment;
    "getIndexForDataAfter(bytes32,uint256)": FunctionFragment;
    "getIndexForDataBefore(bytes32,uint256)": FunctionFragment;
    "getMultipleValuesBefore(bytes32,uint256,uint256,uint256)": FunctionFragment;
    "getNewValueCountbyQueryId(bytes32)": FunctionFragment;
    "getReporterByTimestamp(bytes32,uint256)": FunctionFragment;
    "getTimestampbyQueryIdandIndex(bytes32,uint256)": FunctionFragment;
    "idMappingContract()": FunctionFragment;
    "isInDispute(bytes32,uint256)": FunctionFragment;
    "retrieveData(bytes32,uint256)": FunctionFragment;
    "setIdMappingContract(address)": FunctionFragment;
    "tellor()": FunctionFragment;
    "valueFor(bytes32)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getDataAfter"
      | "getDataBefore"
      | "getIndexForDataAfter"
      | "getIndexForDataBefore"
      | "getMultipleValuesBefore"
      | "getNewValueCountbyQueryId"
      | "getReporterByTimestamp"
      | "getTimestampbyQueryIdandIndex"
      | "idMappingContract"
      | "isInDispute"
      | "retrieveData"
      | "setIdMappingContract"
      | "tellor"
      | "valueFor"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getDataAfter",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getDataBefore",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getIndexForDataAfter",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getIndexForDataBefore",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getMultipleValuesBefore",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getNewValueCountbyQueryId",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getReporterByTimestamp",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTimestampbyQueryIdandIndex",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "idMappingContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isInDispute",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "retrieveData",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setIdMappingContract",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "tellor", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "valueFor",
    values: [PromiseOrValue<BytesLike>]
  ): string;

  decodeFunctionResult(
    functionFragment: "getDataAfter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDataBefore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getIndexForDataAfter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getIndexForDataBefore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMultipleValuesBefore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNewValueCountbyQueryId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReporterByTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTimestampbyQueryIdandIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "idMappingContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isInDispute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "retrieveData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setIdMappingContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tellor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "valueFor", data: BytesLike): Result;

  events: {};
}

export interface UsingTellor extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: UsingTellorInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getDataAfter(
      _queryId: PromiseOrValue<BytesLike>,
      _timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & { _value: string; _timestampRetrieved: BigNumber }
    >;

    getDataBefore(
      _queryId: PromiseOrValue<BytesLike>,
      _timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & { _value: string; _timestampRetrieved: BigNumber }
    >;

    getIndexForDataAfter(
      _queryId: PromiseOrValue<BytesLike>,
      _timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber] & { _found: boolean; _index: BigNumber }>;

    getIndexForDataBefore(
      _queryId: PromiseOrValue<BytesLike>,
      _timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber] & { _found: boolean; _index: BigNumber }>;

    getMultipleValuesBefore(
      _queryId: PromiseOrValue<BytesLike>,
      _timestamp: PromiseOrValue<BigNumberish>,
      _maxAge: PromiseOrValue<BigNumberish>,
      _maxCount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[]] & { _values: string[]; _timestamps: BigNumber[] }
    >;

    getNewValueCountbyQueryId(
      _queryId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getReporterByTimestamp(
      _queryId: PromiseOrValue<BytesLike>,
      _timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getTimestampbyQueryIdandIndex(
      _queryId: PromiseOrValue<BytesLike>,
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    idMappingContract(overrides?: CallOverrides): Promise<[string]>;

    isInDispute(
      _queryId: PromiseOrValue<BytesLike>,
      _timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    retrieveData(
      _queryId: PromiseOrValue<BytesLike>,
      _timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    setIdMappingContract(
      _addy: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    tellor(overrides?: CallOverrides): Promise<[string]>;

    valueFor(
      _id: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        _value: BigNumber;
        _timestamp: BigNumber;
        _statusCode: BigNumber;
      }
    >;
  };

  getDataAfter(
    _queryId: PromiseOrValue<BytesLike>,
    _timestamp: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber] & { _value: string; _timestampRetrieved: BigNumber }
  >;

  getDataBefore(
    _queryId: PromiseOrValue<BytesLike>,
    _timestamp: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber] & { _value: string; _timestampRetrieved: BigNumber }
  >;

  getIndexForDataAfter(
    _queryId: PromiseOrValue<BytesLike>,
    _timestamp: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[boolean, BigNumber] & { _found: boolean; _index: BigNumber }>;

  getIndexForDataBefore(
    _queryId: PromiseOrValue<BytesLike>,
    _timestamp: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[boolean, BigNumber] & { _found: boolean; _index: BigNumber }>;

  getMultipleValuesBefore(
    _queryId: PromiseOrValue<BytesLike>,
    _timestamp: PromiseOrValue<BigNumberish>,
    _maxAge: PromiseOrValue<BigNumberish>,
    _maxCount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string[], BigNumber[]] & { _values: string[]; _timestamps: BigNumber[] }
  >;

  getNewValueCountbyQueryId(
    _queryId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getReporterByTimestamp(
    _queryId: PromiseOrValue<BytesLike>,
    _timestamp: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getTimestampbyQueryIdandIndex(
    _queryId: PromiseOrValue<BytesLike>,
    _index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  idMappingContract(overrides?: CallOverrides): Promise<string>;

  isInDispute(
    _queryId: PromiseOrValue<BytesLike>,
    _timestamp: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  retrieveData(
    _queryId: PromiseOrValue<BytesLike>,
    _timestamp: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  setIdMappingContract(
    _addy: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  tellor(overrides?: CallOverrides): Promise<string>;

  valueFor(
    _id: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      _value: BigNumber;
      _timestamp: BigNumber;
      _statusCode: BigNumber;
    }
  >;

  callStatic: {
    getDataAfter(
      _queryId: PromiseOrValue<BytesLike>,
      _timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & { _value: string; _timestampRetrieved: BigNumber }
    >;

    getDataBefore(
      _queryId: PromiseOrValue<BytesLike>,
      _timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & { _value: string; _timestampRetrieved: BigNumber }
    >;

    getIndexForDataAfter(
      _queryId: PromiseOrValue<BytesLike>,
      _timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber] & { _found: boolean; _index: BigNumber }>;

    getIndexForDataBefore(
      _queryId: PromiseOrValue<BytesLike>,
      _timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber] & { _found: boolean; _index: BigNumber }>;

    getMultipleValuesBefore(
      _queryId: PromiseOrValue<BytesLike>,
      _timestamp: PromiseOrValue<BigNumberish>,
      _maxAge: PromiseOrValue<BigNumberish>,
      _maxCount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[]] & { _values: string[]; _timestamps: BigNumber[] }
    >;

    getNewValueCountbyQueryId(
      _queryId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReporterByTimestamp(
      _queryId: PromiseOrValue<BytesLike>,
      _timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getTimestampbyQueryIdandIndex(
      _queryId: PromiseOrValue<BytesLike>,
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    idMappingContract(overrides?: CallOverrides): Promise<string>;

    isInDispute(
      _queryId: PromiseOrValue<BytesLike>,
      _timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    retrieveData(
      _queryId: PromiseOrValue<BytesLike>,
      _timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    setIdMappingContract(
      _addy: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    tellor(overrides?: CallOverrides): Promise<string>;

    valueFor(
      _id: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        _value: BigNumber;
        _timestamp: BigNumber;
        _statusCode: BigNumber;
      }
    >;
  };

  filters: {};

  estimateGas: {
    getDataAfter(
      _queryId: PromiseOrValue<BytesLike>,
      _timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDataBefore(
      _queryId: PromiseOrValue<BytesLike>,
      _timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getIndexForDataAfter(
      _queryId: PromiseOrValue<BytesLike>,
      _timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getIndexForDataBefore(
      _queryId: PromiseOrValue<BytesLike>,
      _timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMultipleValuesBefore(
      _queryId: PromiseOrValue<BytesLike>,
      _timestamp: PromiseOrValue<BigNumberish>,
      _maxAge: PromiseOrValue<BigNumberish>,
      _maxCount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNewValueCountbyQueryId(
      _queryId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReporterByTimestamp(
      _queryId: PromiseOrValue<BytesLike>,
      _timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTimestampbyQueryIdandIndex(
      _queryId: PromiseOrValue<BytesLike>,
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    idMappingContract(overrides?: CallOverrides): Promise<BigNumber>;

    isInDispute(
      _queryId: PromiseOrValue<BytesLike>,
      _timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    retrieveData(
      _queryId: PromiseOrValue<BytesLike>,
      _timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setIdMappingContract(
      _addy: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    tellor(overrides?: CallOverrides): Promise<BigNumber>;

    valueFor(
      _id: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getDataAfter(
      _queryId: PromiseOrValue<BytesLike>,
      _timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDataBefore(
      _queryId: PromiseOrValue<BytesLike>,
      _timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getIndexForDataAfter(
      _queryId: PromiseOrValue<BytesLike>,
      _timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getIndexForDataBefore(
      _queryId: PromiseOrValue<BytesLike>,
      _timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMultipleValuesBefore(
      _queryId: PromiseOrValue<BytesLike>,
      _timestamp: PromiseOrValue<BigNumberish>,
      _maxAge: PromiseOrValue<BigNumberish>,
      _maxCount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNewValueCountbyQueryId(
      _queryId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReporterByTimestamp(
      _queryId: PromiseOrValue<BytesLike>,
      _timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTimestampbyQueryIdandIndex(
      _queryId: PromiseOrValue<BytesLike>,
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    idMappingContract(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isInDispute(
      _queryId: PromiseOrValue<BytesLike>,
      _timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    retrieveData(
      _queryId: PromiseOrValue<BytesLike>,
      _timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setIdMappingContract(
      _addy: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    tellor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    valueFor(
      _id: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
