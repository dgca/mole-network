/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../common";

export declare namespace Autopay {
  export type FeedDetailsStruct = {
    reward: PromiseOrValue<BigNumberish>;
    balance: PromiseOrValue<BigNumberish>;
    startTime: PromiseOrValue<BigNumberish>;
    interval: PromiseOrValue<BigNumberish>;
    window: PromiseOrValue<BigNumberish>;
    priceThreshold: PromiseOrValue<BigNumberish>;
    rewardIncreasePerSecond: PromiseOrValue<BigNumberish>;
    feedsWithFundingIndex: PromiseOrValue<BigNumberish>;
  };

  export type FeedDetailsStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    reward: BigNumber;
    balance: BigNumber;
    startTime: BigNumber;
    interval: BigNumber;
    window: BigNumber;
    priceThreshold: BigNumber;
    rewardIncreasePerSecond: BigNumber;
    feedsWithFundingIndex: BigNumber;
  };

  export type TipStruct = {
    amount: PromiseOrValue<BigNumberish>;
    timestamp: PromiseOrValue<BigNumberish>;
  };

  export type TipStructOutput = [BigNumber, BigNumber] & {
    amount: BigNumber;
    timestamp: BigNumber;
  };
}

export interface ITellorInterface extends utils.Interface {
  functions: {
    "_sliceUint(bytes)": FunctionFragment;
    "addStakingRewards(uint256)": FunctionFragment;
    "addresses(bytes32)": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "allowedToTrade(address,uint256)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "approveAndTransferFrom(address,address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "balanceOfAt(address,uint256)": FunctionFragment;
    "beginDispute(bytes32,uint256)": FunctionFragment;
    "burn(uint256)": FunctionFragment;
    "burnTips()": FunctionFragment;
    "changeAddressVar(bytes32,address)": FunctionFragment;
    "changeDeity(address)": FunctionFragment;
    "changeOwner(address)": FunctionFragment;
    "changeReportingLock(uint256)": FunctionFragment;
    "changeStakingStatus(address,uint256)": FunctionFragment;
    "changeTimeBasedReward(uint256)": FunctionFragment;
    "changeUint(bytes32,uint256)": FunctionFragment;
    "claimOneTimeTip(bytes32,uint256[])": FunctionFragment;
    "claimTip(bytes32,bytes32,uint256[])": FunctionFragment;
    "decimals()": FunctionFragment;
    "delegate(address)": FunctionFragment;
    "delegateOfAt(address,uint256)": FunctionFragment;
    "depositStake()": FunctionFragment;
    "depositStake(uint256)": FunctionFragment;
    "didVote(uint256,address)": FunctionFragment;
    "executeVote(uint256)": FunctionFragment;
    "fee()": FunctionFragment;
    "feedsWithFunding(uint256)": FunctionFragment;
    "fundFeed(bytes32,bytes32,uint256)": FunctionFragment;
    "getAddressVars(bytes32)": FunctionFragment;
    "getAllDisputeVars(uint256)": FunctionFragment;
    "getBlockNumberByTimestamp(bytes32,uint256)": FunctionFragment;
    "getCurrentFeeds(bytes32)": FunctionFragment;
    "getCurrentReward(bytes32)": FunctionFragment;
    "getCurrentTip(bytes32)": FunctionFragment;
    "getCurrentValue(bytes32)": FunctionFragment;
    "getDataAfter(bytes32,uint256)": FunctionFragment;
    "getDataBefore(bytes32,uint256)": FunctionFragment;
    "getDataFeed(bytes32)": FunctionFragment;
    "getDelegateInfo(address)": FunctionFragment;
    "getDisputeIdByDisputeHash(bytes32)": FunctionFragment;
    "getDisputeInfo(uint256)": FunctionFragment;
    "getDisputeUintVars(uint256,bytes32)": FunctionFragment;
    "getFundedFeeds()": FunctionFragment;
    "getFundedQueryIds()": FunctionFragment;
    "getIndexForDataAfter(bytes32,uint256)": FunctionFragment;
    "getIndexForDataBefore(bytes32,uint256)": FunctionFragment;
    "getLastNewValueById(uint256)": FunctionFragment;
    "getMultipleValuesBefore(bytes32,uint256,uint256,uint256)": FunctionFragment;
    "getNewCurrentVariables()": FunctionFragment;
    "getNewValueCountbyQueryId(bytes32)": FunctionFragment;
    "getNewValueCountbyRequestId(uint256)": FunctionFragment;
    "getOpenDisputesOnId(bytes32)": FunctionFragment;
    "getPastTipByIndex(bytes32,uint256)": FunctionFragment;
    "getPastTipCount(bytes32)": FunctionFragment;
    "getPastTips(bytes32)": FunctionFragment;
    "getQueryIdFromFeedId(bytes32)": FunctionFragment;
    "getReportTimestampByIndex(bytes32,uint256)": FunctionFragment;
    "getReporterByTimestamp(bytes32,uint256)": FunctionFragment;
    "getReporterLastTimestamp(address)": FunctionFragment;
    "getReportingLock()": FunctionFragment;
    "getReportsSubmittedByAddress(address)": FunctionFragment;
    "getRewardAmount(bytes32,bytes32,uint256[])": FunctionFragment;
    "getRewardClaimedStatus(bytes32,bytes32,uint256)": FunctionFragment;
    "getStakerInfo(address)": FunctionFragment;
    "getTimeBasedReward()": FunctionFragment;
    "getTimeOfLastNewValue()": FunctionFragment;
    "getTimestampCountById(bytes32)": FunctionFragment;
    "getTimestampIndexByTimestamp(bytes32,uint256)": FunctionFragment;
    "getTimestampbyQueryIdandIndex(bytes32,uint256)": FunctionFragment;
    "getTimestampbyRequestIDandIndex(uint256,uint256)": FunctionFragment;
    "getTipsByAddress(address)": FunctionFragment;
    "getTipsById(bytes32)": FunctionFragment;
    "getTipsByUser(address)": FunctionFragment;
    "getUintVar(bytes32)": FunctionFragment;
    "getValueByTimestamp(bytes32,uint256)": FunctionFragment;
    "getVoteCount()": FunctionFragment;
    "getVoteInfo(uint256)": FunctionFragment;
    "getVoteRounds(bytes32)": FunctionFragment;
    "governance()": FunctionFragment;
    "init()": FunctionFragment;
    "isApprovedGovernanceContract(address)": FunctionFragment;
    "isFunctionApproved(bytes4)": FunctionFragment;
    "isInDispute(bytes32,uint256)": FunctionFragment;
    "isMigrated(address)": FunctionFragment;
    "killContract()": FunctionFragment;
    "migrate()": FunctionFragment;
    "migrateFor(address,uint256)": FunctionFragment;
    "mint(address,uint256)": FunctionFragment;
    "name()": FunctionFragment;
    "proposeVote(address,bytes4,bytes,uint256)": FunctionFragment;
    "queryIdFromDataFeedId(bytes32)": FunctionFragment;
    "queryIdsWithFunding(uint256)": FunctionFragment;
    "queryIdsWithFundingIndex(bytes32)": FunctionFragment;
    "removeValue(bytes32,uint256)": FunctionFragment;
    "reportingLock()": FunctionFragment;
    "requestStakingWithdraw()": FunctionFragment;
    "requestStakingWithdraw(uint256)": FunctionFragment;
    "rescue51PercentAttack(address)": FunctionFragment;
    "rescueBrokenDataReporting()": FunctionFragment;
    "rescueFailedUpdate()": FunctionFragment;
    "retrieveData(uint256,uint256)": FunctionFragment;
    "retrieveData(bytes32,uint256)": FunctionFragment;
    "setApprovedFunction(bytes4,bool)": FunctionFragment;
    "setupDataFeed(bytes32,uint256,uint256,uint256,uint256,uint256,uint256,bytes,uint256)": FunctionFragment;
    "slashReporter(address,address)": FunctionFragment;
    "submitValue(bytes32,bytes,uint256,bytes)": FunctionFragment;
    "symbol()": FunctionFragment;
    "tallyVotes(uint256)": FunctionFragment;
    "tellor()": FunctionFragment;
    "tip(bytes32,uint256,bytes)": FunctionFragment;
    "tipQuery(bytes32,uint256,bytes)": FunctionFragment;
    "tips(bytes32,uint256)": FunctionFragment;
    "token()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "uints(bytes32)": FunctionFragment;
    "updateMinDisputeFee()": FunctionFragment;
    "userTipsTotal(address)": FunctionFragment;
    "valueFor(bytes32)": FunctionFragment;
    "verify()": FunctionFragment;
    "vote(uint256,bool,bool)": FunctionFragment;
    "voteFor(address[],uint256,bool,bool)": FunctionFragment;
    "withdrawStake()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "_sliceUint"
      | "addStakingRewards"
      | "addresses"
      | "allowance"
      | "allowedToTrade"
      | "approve"
      | "approveAndTransferFrom"
      | "balanceOf"
      | "balanceOfAt"
      | "beginDispute"
      | "burn"
      | "burnTips"
      | "changeAddressVar"
      | "changeDeity"
      | "changeOwner"
      | "changeReportingLock"
      | "changeStakingStatus"
      | "changeTimeBasedReward"
      | "changeUint"
      | "claimOneTimeTip"
      | "claimTip"
      | "decimals"
      | "delegate"
      | "delegateOfAt"
      | "depositStake()"
      | "depositStake(uint256)"
      | "didVote"
      | "executeVote"
      | "fee"
      | "feedsWithFunding"
      | "fundFeed"
      | "getAddressVars"
      | "getAllDisputeVars"
      | "getBlockNumberByTimestamp"
      | "getCurrentFeeds"
      | "getCurrentReward"
      | "getCurrentTip"
      | "getCurrentValue"
      | "getDataAfter"
      | "getDataBefore"
      | "getDataFeed"
      | "getDelegateInfo"
      | "getDisputeIdByDisputeHash"
      | "getDisputeInfo"
      | "getDisputeUintVars"
      | "getFundedFeeds"
      | "getFundedQueryIds"
      | "getIndexForDataAfter"
      | "getIndexForDataBefore"
      | "getLastNewValueById"
      | "getMultipleValuesBefore"
      | "getNewCurrentVariables"
      | "getNewValueCountbyQueryId"
      | "getNewValueCountbyRequestId"
      | "getOpenDisputesOnId"
      | "getPastTipByIndex"
      | "getPastTipCount"
      | "getPastTips"
      | "getQueryIdFromFeedId"
      | "getReportTimestampByIndex"
      | "getReporterByTimestamp"
      | "getReporterLastTimestamp"
      | "getReportingLock"
      | "getReportsSubmittedByAddress"
      | "getRewardAmount"
      | "getRewardClaimedStatus"
      | "getStakerInfo"
      | "getTimeBasedReward"
      | "getTimeOfLastNewValue"
      | "getTimestampCountById"
      | "getTimestampIndexByTimestamp"
      | "getTimestampbyQueryIdandIndex"
      | "getTimestampbyRequestIDandIndex"
      | "getTipsByAddress"
      | "getTipsById"
      | "getTipsByUser"
      | "getUintVar"
      | "getValueByTimestamp"
      | "getVoteCount"
      | "getVoteInfo"
      | "getVoteRounds"
      | "governance"
      | "init"
      | "isApprovedGovernanceContract"
      | "isFunctionApproved"
      | "isInDispute"
      | "isMigrated"
      | "killContract"
      | "migrate"
      | "migrateFor"
      | "mint"
      | "name"
      | "proposeVote"
      | "queryIdFromDataFeedId"
      | "queryIdsWithFunding"
      | "queryIdsWithFundingIndex"
      | "removeValue"
      | "reportingLock"
      | "requestStakingWithdraw()"
      | "requestStakingWithdraw(uint256)"
      | "rescue51PercentAttack"
      | "rescueBrokenDataReporting"
      | "rescueFailedUpdate"
      | "retrieveData(uint256,uint256)"
      | "retrieveData(bytes32,uint256)"
      | "setApprovedFunction"
      | "setupDataFeed"
      | "slashReporter"
      | "submitValue"
      | "symbol"
      | "tallyVotes"
      | "tellor"
      | "tip"
      | "tipQuery"
      | "tips"
      | "token"
      | "totalSupply"
      | "transfer"
      | "transferFrom"
      | "uints"
      | "updateMinDisputeFee"
      | "userTipsTotal"
      | "valueFor"
      | "verify"
      | "vote"
      | "voteFor"
      | "withdrawStake"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "_sliceUint",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "addStakingRewards",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "addresses",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "allowedToTrade",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "approveAndTransferFrom",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfAt",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "beginDispute",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "burn",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "burnTips", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "changeAddressVar",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "changeDeity",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "changeOwner",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "changeReportingLock",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "changeStakingStatus",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "changeTimeBasedReward",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "changeUint",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "claimOneTimeTip",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "claimTip",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "delegate",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "delegateOfAt",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "depositStake()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "depositStake(uint256)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "didVote",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "executeVote",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "fee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "feedsWithFunding",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "fundFeed",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getAddressVars",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllDisputeVars",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getBlockNumberByTimestamp",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentFeeds",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentReward",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentTip",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentValue",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getDataAfter",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getDataBefore",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getDataFeed",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getDelegateInfo",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getDisputeIdByDisputeHash",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getDisputeInfo",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getDisputeUintVars",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getFundedFeeds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFundedQueryIds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getIndexForDataAfter",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getIndexForDataBefore",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getLastNewValueById",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getMultipleValuesBefore",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getNewCurrentVariables",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNewValueCountbyQueryId",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getNewValueCountbyRequestId",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getOpenDisputesOnId",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPastTipByIndex",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPastTipCount",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPastTips",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getQueryIdFromFeedId",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getReportTimestampByIndex",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getReporterByTimestamp",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getReporterLastTimestamp",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getReportingLock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getReportsSubmittedByAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRewardAmount",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getRewardClaimedStatus",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getStakerInfo",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTimeBasedReward",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTimeOfLastNewValue",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTimestampCountById",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTimestampIndexByTimestamp",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTimestampbyQueryIdandIndex",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTimestampbyRequestIDandIndex",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTipsByAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTipsById",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTipsByUser",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getUintVar",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getValueByTimestamp",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getVoteCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVoteInfo",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getVoteRounds",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "governance",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "init", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isApprovedGovernanceContract",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isFunctionApproved",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "isInDispute",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "isMigrated",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "killContract",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "migrate", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "migrateFor",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proposeVote",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "queryIdFromDataFeedId",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "queryIdsWithFunding",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "queryIdsWithFundingIndex",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeValue",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "reportingLock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requestStakingWithdraw()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requestStakingWithdraw(uint256)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "rescue51PercentAttack",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "rescueBrokenDataReporting",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rescueFailedUpdate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "retrieveData(uint256,uint256)",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "retrieveData(bytes32,uint256)",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovedFunction",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setupDataFeed",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "slashReporter",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "submitValue",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tallyVotes",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "tellor", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tip",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "tipQuery",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "tips",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "uints",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMinDisputeFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "userTipsTotal",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "valueFor",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(functionFragment: "verify", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "vote",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "voteFor",
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawStake",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "_sliceUint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addStakingRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addresses", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "allowedToTrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "approveAndTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "beginDispute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burnTips", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changeAddressVar",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeDeity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeReportingLock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeStakingStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeTimeBasedReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "changeUint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimOneTimeTip",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claimTip", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "delegate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "delegateOfAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositStake()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositStake(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "didVote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "executeVote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "feedsWithFunding",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fundFeed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAddressVars",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllDisputeVars",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBlockNumberByTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentFeeds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentTip",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDataAfter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDataBefore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDataFeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDelegateInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDisputeIdByDisputeHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDisputeInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDisputeUintVars",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFundedFeeds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFundedQueryIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getIndexForDataAfter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getIndexForDataBefore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLastNewValueById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMultipleValuesBefore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNewCurrentVariables",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNewValueCountbyQueryId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNewValueCountbyRequestId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOpenDisputesOnId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPastTipByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPastTipCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPastTips",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getQueryIdFromFeedId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReportTimestampByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReporterByTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReporterLastTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReportingLock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReportsSubmittedByAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRewardAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRewardClaimedStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStakerInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTimeBasedReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTimeOfLastNewValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTimestampCountById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTimestampIndexByTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTimestampbyQueryIdandIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTimestampbyRequestIDandIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTipsByAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTipsById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTipsByUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getUintVar", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getValueByTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVoteCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVoteInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVoteRounds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "governance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "init", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedGovernanceContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isFunctionApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isInDispute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isMigrated", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "killContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "migrate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "migrateFor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proposeVote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "queryIdFromDataFeedId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "queryIdsWithFunding",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "queryIdsWithFundingIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reportingLock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestStakingWithdraw()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestStakingWithdraw(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rescue51PercentAttack",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rescueBrokenDataReporting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rescueFailedUpdate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "retrieveData(uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "retrieveData(bytes32,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovedFunction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setupDataFeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "slashReporter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tallyVotes", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tellor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tip", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tipQuery", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tips", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "uints", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateMinDisputeFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userTipsTotal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "valueFor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "verify", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vote", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "voteFor", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawStake",
    data: BytesLike
  ): Result;

  events: {};
}

export interface ITellor extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ITellorInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    _sliceUint(
      _b: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _number: BigNumber }>;

    addStakingRewards(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addresses(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    allowance(
      _user: PromiseOrValue<string>,
      _spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    allowedToTrade(
      _user: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    approve(
      _spender: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    approveAndTransferFrom(
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    balanceOf(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    balanceOfAt(
      _user: PromiseOrValue<string>,
      _blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    beginDispute(
      _queryId: PromiseOrValue<BytesLike>,
      _timestamp: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    burn(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    burnTips(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    changeAddressVar(
      _id: PromiseOrValue<BytesLike>,
      _addy: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    changeDeity(
      _newDeity: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    changeOwner(
      _newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    changeReportingLock(
      _newReportingLock: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    changeStakingStatus(
      _reporter: PromiseOrValue<string>,
      _status: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    changeTimeBasedReward(
      _newTimeBasedReward: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    changeUint(
      _target: PromiseOrValue<BytesLike>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimOneTimeTip(
      _queryId: PromiseOrValue<BytesLike>,
      _timestamps: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimTip(
      _feedId: PromiseOrValue<BytesLike>,
      _queryId: PromiseOrValue<BytesLike>,
      _timestamps: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    delegate(
      _delegate: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    delegateOfAt(
      _user: PromiseOrValue<string>,
      _blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "depositStake()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "depositStake(uint256)"(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    didVote(
      _disputeId: PromiseOrValue<BigNumberish>,
      _voter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    executeVote(
      _disputeId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    fee(overrides?: CallOverrides): Promise<[BigNumber]>;

    feedsWithFunding(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    fundFeed(
      _feedId: PromiseOrValue<BytesLike>,
      _queryId: PromiseOrValue<BytesLike>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getAddressVars(
      _data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getAllDisputeVars(
      _disputeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        boolean,
        boolean,
        boolean,
        string,
        string,
        string,
        BigNumber[],
        BigNumber
      ]
    >;

    getBlockNumberByTimestamp(
      _queryId: PromiseOrValue<BytesLike>,
      _timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getCurrentFeeds(
      _queryId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getCurrentReward(
      _queryId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    getCurrentTip(
      _queryId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getCurrentValue(
      _queryId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getDataAfter(
      _queryId: PromiseOrValue<BytesLike>,
      _timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & { _value: string; _timestampRetrieved: BigNumber }
    >;

    getDataBefore(
      _queryId: PromiseOrValue<BytesLike>,
      _timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [boolean, string, BigNumber] & {
        _ifRetrieve: boolean;
        _value: string;
        _timestampRetrieved: BigNumber;
      }
    >;

    getDataFeed(
      _feedId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[Autopay.FeedDetailsStructOutput]>;

    getDelegateInfo(
      _holder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber]>;

    getDisputeIdByDisputeHash(
      _hash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getDisputeInfo(
      _disputeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, string, string]>;

    getDisputeUintVars(
      _disputeId: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getFundedFeeds(overrides?: CallOverrides): Promise<[string[]]>;

    getFundedQueryIds(overrides?: CallOverrides): Promise<[string[]]>;

    getIndexForDataAfter(
      _queryId: PromiseOrValue<BytesLike>,
      _timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber] & { _found: boolean; _index: BigNumber }>;

    getIndexForDataBefore(
      _queryId: PromiseOrValue<BytesLike>,
      _timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber] & { _found: boolean; _index: BigNumber }>;

    getLastNewValueById(
      _requestId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, boolean]>;

    getMultipleValuesBefore(
      _queryId: PromiseOrValue<BytesLike>,
      _timestamp: PromiseOrValue<BigNumberish>,
      _maxAge: PromiseOrValue<BigNumberish>,
      _maxCount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber[], BigNumber[]] & {
        _values: BigNumber[];
        _timestamps: BigNumber[];
      }
    >;

    getNewCurrentVariables(
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
        BigNumber,
        BigNumber
      ] & {
        _c: string;
        _r: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber];
        _d: BigNumber;
        _t: BigNumber;
      }
    >;

    getNewValueCountbyQueryId(
      _queryId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getNewValueCountbyRequestId(
      _requestId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getOpenDisputesOnId(
      _queryId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPastTipByIndex(
      _queryId: PromiseOrValue<BytesLike>,
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[Autopay.TipStructOutput]>;

    getPastTipCount(
      _queryId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPastTips(
      _queryId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[Autopay.TipStructOutput[]]>;

    getQueryIdFromFeedId(
      _feedId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getReportTimestampByIndex(
      _queryId: PromiseOrValue<BytesLike>,
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getReporterByTimestamp(
      _queryId: PromiseOrValue<BytesLike>,
      _timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getReporterLastTimestamp(
      _reporter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getReportingLock(overrides?: CallOverrides): Promise<[BigNumber]>;

    getReportsSubmittedByAddress(
      _reporter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getRewardAmount(
      _feedId: PromiseOrValue<BytesLike>,
      _queryId: PromiseOrValue<BytesLike>,
      _timestamps: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _cumulativeReward: BigNumber }>;

    getRewardClaimedStatus(
      _feedId: PromiseOrValue<BytesLike>,
      _queryId: PromiseOrValue<BytesLike>,
      _timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getStakerInfo(
      _staker: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    getTimeBasedReward(overrides?: CallOverrides): Promise<[BigNumber]>;

    getTimeOfLastNewValue(overrides?: CallOverrides): Promise<[BigNumber]>;

    getTimestampCountById(
      _queryId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTimestampIndexByTimestamp(
      _queryId: PromiseOrValue<BytesLike>,
      _timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTimestampbyQueryIdandIndex(
      _queryId: PromiseOrValue<BytesLike>,
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTimestampbyRequestIDandIndex(
      _requestId: PromiseOrValue<BigNumberish>,
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTipsByAddress(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTipsById(
      _queryId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTipsByUser(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getUintVar(
      _data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getValueByTimestamp(
      _queryId: PromiseOrValue<BytesLike>,
      _timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getVoteCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    getVoteInfo(
      _disputeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber[],
        [boolean, boolean],
        number,
        string,
        string,
        [string, string]
      ]
    >;

    getVoteRounds(
      _hash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    governance(overrides?: CallOverrides): Promise<[string]>;

    init(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isApprovedGovernanceContract(
      _contract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isFunctionApproved(
      _func: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isInDispute(
      _queryId: PromiseOrValue<BytesLike>,
      _timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isMigrated(
      _addy: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    killContract(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    migrate(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    migrateFor(
      _destination: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    mint(
      _reciever: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    proposeVote(
      _contract: PromiseOrValue<string>,
      _function: PromiseOrValue<BytesLike>,
      _data: PromiseOrValue<BytesLike>,
      _timestamp: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    queryIdFromDataFeedId(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    queryIdsWithFunding(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    queryIdsWithFundingIndex(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    removeValue(
      _queryId: PromiseOrValue<BytesLike>,
      _timestamp: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    reportingLock(overrides?: CallOverrides): Promise<[BigNumber]>;

    "requestStakingWithdraw()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "requestStakingWithdraw(uint256)"(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    rescue51PercentAttack(
      _tokenHolder: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    rescueBrokenDataReporting(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    rescueFailedUpdate(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "retrieveData(uint256,uint256)"(
      _requestId: PromiseOrValue<BigNumberish>,
      _timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "retrieveData(bytes32,uint256)"(
      _queryId: PromiseOrValue<BytesLike>,
      _timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    setApprovedFunction(
      _func: PromiseOrValue<BytesLike>,
      _val: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setupDataFeed(
      _queryId: PromiseOrValue<BytesLike>,
      _reward: PromiseOrValue<BigNumberish>,
      _startTime: PromiseOrValue<BigNumberish>,
      _interval: PromiseOrValue<BigNumberish>,
      _window: PromiseOrValue<BigNumberish>,
      _priceThreshold: PromiseOrValue<BigNumberish>,
      _rewardIncreasePerSecond: PromiseOrValue<BigNumberish>,
      _queryData: PromiseOrValue<BytesLike>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    slashReporter(
      _reporter: PromiseOrValue<string>,
      _disputer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    submitValue(
      _queryId: PromiseOrValue<BytesLike>,
      _value: PromiseOrValue<BytesLike>,
      _nonce: PromiseOrValue<BigNumberish>,
      _queryData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    tallyVotes(
      _disputeId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    tellor(overrides?: CallOverrides): Promise<[string]>;

    tip(
      _queryId: PromiseOrValue<BytesLike>,
      _amount: PromiseOrValue<BigNumberish>,
      _queryData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    tipQuery(
      _queryId: PromiseOrValue<BytesLike>,
      _tip: PromiseOrValue<BigNumberish>,
      _queryData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    tips(
      arg0: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount: BigNumber; timestamp: BigNumber }
    >;

    token(overrides?: CallOverrides): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferFrom(
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    uints(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    updateMinDisputeFee(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    userTipsTotal(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    valueFor(
      _id: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        _value: BigNumber;
        _timestamp: BigNumber;
        _statusCode: BigNumber;
      }
    >;

    verify(overrides?: CallOverrides): Promise<[BigNumber]>;

    vote(
      _disputeId: PromiseOrValue<BigNumberish>,
      _supports: PromiseOrValue<boolean>,
      _invalidQuery: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    voteFor(
      _addys: PromiseOrValue<string>[],
      _disputeId: PromiseOrValue<BigNumberish>,
      _supports: PromiseOrValue<boolean>,
      _invalidQuery: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawStake(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  _sliceUint(
    _b: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  addStakingRewards(
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addresses(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  allowance(
    _user: PromiseOrValue<string>,
    _spender: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  allowedToTrade(
    _user: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  approve(
    _spender: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  approveAndTransferFrom(
    _from: PromiseOrValue<string>,
    _to: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  balanceOf(
    _user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  balanceOfAt(
    _user: PromiseOrValue<string>,
    _blockNumber: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  beginDispute(
    _queryId: PromiseOrValue<BytesLike>,
    _timestamp: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  burn(
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  burnTips(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  changeAddressVar(
    _id: PromiseOrValue<BytesLike>,
    _addy: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  changeDeity(
    _newDeity: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  changeOwner(
    _newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  changeReportingLock(
    _newReportingLock: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  changeStakingStatus(
    _reporter: PromiseOrValue<string>,
    _status: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  changeTimeBasedReward(
    _newTimeBasedReward: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  changeUint(
    _target: PromiseOrValue<BytesLike>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimOneTimeTip(
    _queryId: PromiseOrValue<BytesLike>,
    _timestamps: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimTip(
    _feedId: PromiseOrValue<BytesLike>,
    _queryId: PromiseOrValue<BytesLike>,
    _timestamps: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  decimals(overrides?: CallOverrides): Promise<number>;

  delegate(
    _delegate: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  delegateOfAt(
    _user: PromiseOrValue<string>,
    _blockNumber: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  "depositStake()"(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "depositStake(uint256)"(
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  didVote(
    _disputeId: PromiseOrValue<BigNumberish>,
    _voter: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  executeVote(
    _disputeId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  fee(overrides?: CallOverrides): Promise<BigNumber>;

  feedsWithFunding(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  fundFeed(
    _feedId: PromiseOrValue<BytesLike>,
    _queryId: PromiseOrValue<BytesLike>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getAddressVars(
    _data: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  getAllDisputeVars(
    _disputeId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      boolean,
      boolean,
      boolean,
      string,
      string,
      string,
      BigNumber[],
      BigNumber
    ]
  >;

  getBlockNumberByTimestamp(
    _queryId: PromiseOrValue<BytesLike>,
    _timestamp: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getCurrentFeeds(
    _queryId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getCurrentReward(
    _queryId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  getCurrentTip(
    _queryId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getCurrentValue(
    _queryId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  getDataAfter(
    _queryId: PromiseOrValue<BytesLike>,
    _timestamp: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber] & { _value: string; _timestampRetrieved: BigNumber }
  >;

  getDataBefore(
    _queryId: PromiseOrValue<BytesLike>,
    _timestamp: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [boolean, string, BigNumber] & {
      _ifRetrieve: boolean;
      _value: string;
      _timestampRetrieved: BigNumber;
    }
  >;

  getDataFeed(
    _feedId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<Autopay.FeedDetailsStructOutput>;

  getDelegateInfo(
    _holder: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber]>;

  getDisputeIdByDisputeHash(
    _hash: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getDisputeInfo(
    _disputeId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, string, string]>;

  getDisputeUintVars(
    _disputeId: PromiseOrValue<BigNumberish>,
    _data: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getFundedFeeds(overrides?: CallOverrides): Promise<string[]>;

  getFundedQueryIds(overrides?: CallOverrides): Promise<string[]>;

  getIndexForDataAfter(
    _queryId: PromiseOrValue<BytesLike>,
    _timestamp: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[boolean, BigNumber] & { _found: boolean; _index: BigNumber }>;

  getIndexForDataBefore(
    _queryId: PromiseOrValue<BytesLike>,
    _timestamp: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[boolean, BigNumber] & { _found: boolean; _index: BigNumber }>;

  getLastNewValueById(
    _requestId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, boolean]>;

  getMultipleValuesBefore(
    _queryId: PromiseOrValue<BytesLike>,
    _timestamp: PromiseOrValue<BigNumberish>,
    _maxAge: PromiseOrValue<BigNumberish>,
    _maxCount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber[], BigNumber[]] & {
      _values: BigNumber[];
      _timestamps: BigNumber[];
    }
  >;

  getNewCurrentVariables(
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
      BigNumber,
      BigNumber
    ] & {
      _c: string;
      _r: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber];
      _d: BigNumber;
      _t: BigNumber;
    }
  >;

  getNewValueCountbyQueryId(
    _queryId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getNewValueCountbyRequestId(
    _requestId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getOpenDisputesOnId(
    _queryId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPastTipByIndex(
    _queryId: PromiseOrValue<BytesLike>,
    _index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<Autopay.TipStructOutput>;

  getPastTipCount(
    _queryId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPastTips(
    _queryId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<Autopay.TipStructOutput[]>;

  getQueryIdFromFeedId(
    _feedId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  getReportTimestampByIndex(
    _queryId: PromiseOrValue<BytesLike>,
    _index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getReporterByTimestamp(
    _queryId: PromiseOrValue<BytesLike>,
    _timestamp: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getReporterLastTimestamp(
    _reporter: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getReportingLock(overrides?: CallOverrides): Promise<BigNumber>;

  getReportsSubmittedByAddress(
    _reporter: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRewardAmount(
    _feedId: PromiseOrValue<BytesLike>,
    _queryId: PromiseOrValue<BytesLike>,
    _timestamps: PromiseOrValue<BigNumberish>[],
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRewardClaimedStatus(
    _feedId: PromiseOrValue<BytesLike>,
    _queryId: PromiseOrValue<BytesLike>,
    _timestamp: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getStakerInfo(
    _staker: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  getTimeBasedReward(overrides?: CallOverrides): Promise<BigNumber>;

  getTimeOfLastNewValue(overrides?: CallOverrides): Promise<BigNumber>;

  getTimestampCountById(
    _queryId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTimestampIndexByTimestamp(
    _queryId: PromiseOrValue<BytesLike>,
    _timestamp: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTimestampbyQueryIdandIndex(
    _queryId: PromiseOrValue<BytesLike>,
    _index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTimestampbyRequestIDandIndex(
    _requestId: PromiseOrValue<BigNumberish>,
    _index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTipsByAddress(
    _user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTipsById(
    _queryId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTipsByUser(
    _user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getUintVar(
    _data: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getValueByTimestamp(
    _queryId: PromiseOrValue<BytesLike>,
    _timestamp: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getVoteCount(overrides?: CallOverrides): Promise<BigNumber>;

  getVoteInfo(
    _disputeId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      BigNumber[],
      [boolean, boolean],
      number,
      string,
      string,
      [string, string]
    ]
  >;

  getVoteRounds(
    _hash: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  governance(overrides?: CallOverrides): Promise<string>;

  init(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isApprovedGovernanceContract(
    _contract: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isFunctionApproved(
    _func: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isInDispute(
    _queryId: PromiseOrValue<BytesLike>,
    _timestamp: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isMigrated(
    _addy: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  killContract(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  migrate(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  migrateFor(
    _destination: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  mint(
    _reciever: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  proposeVote(
    _contract: PromiseOrValue<string>,
    _function: PromiseOrValue<BytesLike>,
    _data: PromiseOrValue<BytesLike>,
    _timestamp: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  queryIdFromDataFeedId(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  queryIdsWithFunding(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  queryIdsWithFundingIndex(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  removeValue(
    _queryId: PromiseOrValue<BytesLike>,
    _timestamp: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  reportingLock(overrides?: CallOverrides): Promise<BigNumber>;

  "requestStakingWithdraw()"(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "requestStakingWithdraw(uint256)"(
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  rescue51PercentAttack(
    _tokenHolder: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  rescueBrokenDataReporting(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  rescueFailedUpdate(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "retrieveData(uint256,uint256)"(
    _requestId: PromiseOrValue<BigNumberish>,
    _timestamp: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "retrieveData(bytes32,uint256)"(
    _queryId: PromiseOrValue<BytesLike>,
    _timestamp: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  setApprovedFunction(
    _func: PromiseOrValue<BytesLike>,
    _val: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setupDataFeed(
    _queryId: PromiseOrValue<BytesLike>,
    _reward: PromiseOrValue<BigNumberish>,
    _startTime: PromiseOrValue<BigNumberish>,
    _interval: PromiseOrValue<BigNumberish>,
    _window: PromiseOrValue<BigNumberish>,
    _priceThreshold: PromiseOrValue<BigNumberish>,
    _rewardIncreasePerSecond: PromiseOrValue<BigNumberish>,
    _queryData: PromiseOrValue<BytesLike>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  slashReporter(
    _reporter: PromiseOrValue<string>,
    _disputer: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  submitValue(
    _queryId: PromiseOrValue<BytesLike>,
    _value: PromiseOrValue<BytesLike>,
    _nonce: PromiseOrValue<BigNumberish>,
    _queryData: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  tallyVotes(
    _disputeId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  tellor(overrides?: CallOverrides): Promise<string>;

  tip(
    _queryId: PromiseOrValue<BytesLike>,
    _amount: PromiseOrValue<BigNumberish>,
    _queryData: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  tipQuery(
    _queryId: PromiseOrValue<BytesLike>,
    _tip: PromiseOrValue<BigNumberish>,
    _queryData: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  tips(
    arg0: PromiseOrValue<BytesLike>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { amount: BigNumber; timestamp: BigNumber }
  >;

  token(overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    _to: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferFrom(
    _from: PromiseOrValue<string>,
    _to: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  uints(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  updateMinDisputeFee(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  userTipsTotal(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  valueFor(
    _id: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      _value: BigNumber;
      _timestamp: BigNumber;
      _statusCode: BigNumber;
    }
  >;

  verify(overrides?: CallOverrides): Promise<BigNumber>;

  vote(
    _disputeId: PromiseOrValue<BigNumberish>,
    _supports: PromiseOrValue<boolean>,
    _invalidQuery: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  voteFor(
    _addys: PromiseOrValue<string>[],
    _disputeId: PromiseOrValue<BigNumberish>,
    _supports: PromiseOrValue<boolean>,
    _invalidQuery: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawStake(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    _sliceUint(
      _b: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addStakingRewards(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    addresses(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    allowance(
      _user: PromiseOrValue<string>,
      _spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    allowedToTrade(
      _user: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    approve(
      _spender: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    approveAndTransferFrom(
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    balanceOf(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfAt(
      _user: PromiseOrValue<string>,
      _blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    beginDispute(
      _queryId: PromiseOrValue<BytesLike>,
      _timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    burn(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    burnTips(overrides?: CallOverrides): Promise<void>;

    changeAddressVar(
      _id: PromiseOrValue<BytesLike>,
      _addy: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    changeDeity(
      _newDeity: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    changeOwner(
      _newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    changeReportingLock(
      _newReportingLock: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    changeStakingStatus(
      _reporter: PromiseOrValue<string>,
      _status: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    changeTimeBasedReward(
      _newTimeBasedReward: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    changeUint(
      _target: PromiseOrValue<BytesLike>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    claimOneTimeTip(
      _queryId: PromiseOrValue<BytesLike>,
      _timestamps: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    claimTip(
      _feedId: PromiseOrValue<BytesLike>,
      _queryId: PromiseOrValue<BytesLike>,
      _timestamps: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    decimals(overrides?: CallOverrides): Promise<number>;

    delegate(
      _delegate: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    delegateOfAt(
      _user: PromiseOrValue<string>,
      _blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    "depositStake()"(overrides?: CallOverrides): Promise<void>;

    "depositStake(uint256)"(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    didVote(
      _disputeId: PromiseOrValue<BigNumberish>,
      _voter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    executeVote(
      _disputeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    fee(overrides?: CallOverrides): Promise<BigNumber>;

    feedsWithFunding(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    fundFeed(
      _feedId: PromiseOrValue<BytesLike>,
      _queryId: PromiseOrValue<BytesLike>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getAddressVars(
      _data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    getAllDisputeVars(
      _disputeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        boolean,
        boolean,
        boolean,
        string,
        string,
        string,
        BigNumber[],
        BigNumber
      ]
    >;

    getBlockNumberByTimestamp(
      _queryId: PromiseOrValue<BytesLike>,
      _timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCurrentFeeds(
      _queryId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getCurrentReward(
      _queryId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    getCurrentTip(
      _queryId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCurrentValue(
      _queryId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    getDataAfter(
      _queryId: PromiseOrValue<BytesLike>,
      _timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & { _value: string; _timestampRetrieved: BigNumber }
    >;

    getDataBefore(
      _queryId: PromiseOrValue<BytesLike>,
      _timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [boolean, string, BigNumber] & {
        _ifRetrieve: boolean;
        _value: string;
        _timestampRetrieved: BigNumber;
      }
    >;

    getDataFeed(
      _feedId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<Autopay.FeedDetailsStructOutput>;

    getDelegateInfo(
      _holder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber]>;

    getDisputeIdByDisputeHash(
      _hash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDisputeInfo(
      _disputeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, string, string]>;

    getDisputeUintVars(
      _disputeId: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFundedFeeds(overrides?: CallOverrides): Promise<string[]>;

    getFundedQueryIds(overrides?: CallOverrides): Promise<string[]>;

    getIndexForDataAfter(
      _queryId: PromiseOrValue<BytesLike>,
      _timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber] & { _found: boolean; _index: BigNumber }>;

    getIndexForDataBefore(
      _queryId: PromiseOrValue<BytesLike>,
      _timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber] & { _found: boolean; _index: BigNumber }>;

    getLastNewValueById(
      _requestId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, boolean]>;

    getMultipleValuesBefore(
      _queryId: PromiseOrValue<BytesLike>,
      _timestamp: PromiseOrValue<BigNumberish>,
      _maxAge: PromiseOrValue<BigNumberish>,
      _maxCount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber[], BigNumber[]] & {
        _values: BigNumber[];
        _timestamps: BigNumber[];
      }
    >;

    getNewCurrentVariables(
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
        BigNumber,
        BigNumber
      ] & {
        _c: string;
        _r: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber];
        _d: BigNumber;
        _t: BigNumber;
      }
    >;

    getNewValueCountbyQueryId(
      _queryId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNewValueCountbyRequestId(
      _requestId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOpenDisputesOnId(
      _queryId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPastTipByIndex(
      _queryId: PromiseOrValue<BytesLike>,
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<Autopay.TipStructOutput>;

    getPastTipCount(
      _queryId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPastTips(
      _queryId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<Autopay.TipStructOutput[]>;

    getQueryIdFromFeedId(
      _feedId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    getReportTimestampByIndex(
      _queryId: PromiseOrValue<BytesLike>,
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReporterByTimestamp(
      _queryId: PromiseOrValue<BytesLike>,
      _timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getReporterLastTimestamp(
      _reporter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReportingLock(overrides?: CallOverrides): Promise<BigNumber>;

    getReportsSubmittedByAddress(
      _reporter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRewardAmount(
      _feedId: PromiseOrValue<BytesLike>,
      _queryId: PromiseOrValue<BytesLike>,
      _timestamps: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRewardClaimedStatus(
      _feedId: PromiseOrValue<BytesLike>,
      _queryId: PromiseOrValue<BytesLike>,
      _timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getStakerInfo(
      _staker: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    getTimeBasedReward(overrides?: CallOverrides): Promise<BigNumber>;

    getTimeOfLastNewValue(overrides?: CallOverrides): Promise<BigNumber>;

    getTimestampCountById(
      _queryId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTimestampIndexByTimestamp(
      _queryId: PromiseOrValue<BytesLike>,
      _timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTimestampbyQueryIdandIndex(
      _queryId: PromiseOrValue<BytesLike>,
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTimestampbyRequestIDandIndex(
      _requestId: PromiseOrValue<BigNumberish>,
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTipsByAddress(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTipsById(
      _queryId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTipsByUser(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUintVar(
      _data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getValueByTimestamp(
      _queryId: PromiseOrValue<BytesLike>,
      _timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getVoteCount(overrides?: CallOverrides): Promise<BigNumber>;

    getVoteInfo(
      _disputeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber[],
        [boolean, boolean],
        number,
        string,
        string,
        [string, string]
      ]
    >;

    getVoteRounds(
      _hash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    governance(overrides?: CallOverrides): Promise<string>;

    init(overrides?: CallOverrides): Promise<void>;

    isApprovedGovernanceContract(
      _contract: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isFunctionApproved(
      _func: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isInDispute(
      _queryId: PromiseOrValue<BytesLike>,
      _timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isMigrated(
      _addy: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    killContract(overrides?: CallOverrides): Promise<void>;

    migrate(overrides?: CallOverrides): Promise<void>;

    migrateFor(
      _destination: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    mint(
      _reciever: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    name(overrides?: CallOverrides): Promise<string>;

    proposeVote(
      _contract: PromiseOrValue<string>,
      _function: PromiseOrValue<BytesLike>,
      _data: PromiseOrValue<BytesLike>,
      _timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    queryIdFromDataFeedId(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    queryIdsWithFunding(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    queryIdsWithFundingIndex(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeValue(
      _queryId: PromiseOrValue<BytesLike>,
      _timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    reportingLock(overrides?: CallOverrides): Promise<BigNumber>;

    "requestStakingWithdraw()"(overrides?: CallOverrides): Promise<void>;

    "requestStakingWithdraw(uint256)"(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    rescue51PercentAttack(
      _tokenHolder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    rescueBrokenDataReporting(overrides?: CallOverrides): Promise<void>;

    rescueFailedUpdate(overrides?: CallOverrides): Promise<void>;

    "retrieveData(uint256,uint256)"(
      _requestId: PromiseOrValue<BigNumberish>,
      _timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "retrieveData(bytes32,uint256)"(
      _queryId: PromiseOrValue<BytesLike>,
      _timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    setApprovedFunction(
      _func: PromiseOrValue<BytesLike>,
      _val: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setupDataFeed(
      _queryId: PromiseOrValue<BytesLike>,
      _reward: PromiseOrValue<BigNumberish>,
      _startTime: PromiseOrValue<BigNumberish>,
      _interval: PromiseOrValue<BigNumberish>,
      _window: PromiseOrValue<BigNumberish>,
      _priceThreshold: PromiseOrValue<BigNumberish>,
      _rewardIncreasePerSecond: PromiseOrValue<BigNumberish>,
      _queryData: PromiseOrValue<BytesLike>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    slashReporter(
      _reporter: PromiseOrValue<string>,
      _disputer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    submitValue(
      _queryId: PromiseOrValue<BytesLike>,
      _value: PromiseOrValue<BytesLike>,
      _nonce: PromiseOrValue<BigNumberish>,
      _queryData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    symbol(overrides?: CallOverrides): Promise<string>;

    tallyVotes(
      _disputeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    tellor(overrides?: CallOverrides): Promise<string>;

    tip(
      _queryId: PromiseOrValue<BytesLike>,
      _amount: PromiseOrValue<BigNumberish>,
      _queryData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    tipQuery(
      _queryId: PromiseOrValue<BytesLike>,
      _tip: PromiseOrValue<BigNumberish>,
      _queryData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    tips(
      arg0: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount: BigNumber; timestamp: BigNumber }
    >;

    token(overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    uints(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updateMinDisputeFee(overrides?: CallOverrides): Promise<void>;

    userTipsTotal(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    valueFor(
      _id: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        _value: BigNumber;
        _timestamp: BigNumber;
        _statusCode: BigNumber;
      }
    >;

    verify(overrides?: CallOverrides): Promise<BigNumber>;

    vote(
      _disputeId: PromiseOrValue<BigNumberish>,
      _supports: PromiseOrValue<boolean>,
      _invalidQuery: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    voteFor(
      _addys: PromiseOrValue<string>[],
      _disputeId: PromiseOrValue<BigNumberish>,
      _supports: PromiseOrValue<boolean>,
      _invalidQuery: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawStake(overrides?: CallOverrides): Promise<void>;
  };

  filters: {};

  estimateGas: {
    _sliceUint(
      _b: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addStakingRewards(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addresses(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    allowance(
      _user: PromiseOrValue<string>,
      _spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    allowedToTrade(
      _user: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      _spender: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    approveAndTransferFrom(
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    balanceOf(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfAt(
      _user: PromiseOrValue<string>,
      _blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    beginDispute(
      _queryId: PromiseOrValue<BytesLike>,
      _timestamp: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    burn(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    burnTips(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    changeAddressVar(
      _id: PromiseOrValue<BytesLike>,
      _addy: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    changeDeity(
      _newDeity: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    changeOwner(
      _newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    changeReportingLock(
      _newReportingLock: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    changeStakingStatus(
      _reporter: PromiseOrValue<string>,
      _status: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    changeTimeBasedReward(
      _newTimeBasedReward: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    changeUint(
      _target: PromiseOrValue<BytesLike>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimOneTimeTip(
      _queryId: PromiseOrValue<BytesLike>,
      _timestamps: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimTip(
      _feedId: PromiseOrValue<BytesLike>,
      _queryId: PromiseOrValue<BytesLike>,
      _timestamps: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    delegate(
      _delegate: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    delegateOfAt(
      _user: PromiseOrValue<string>,
      _blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "depositStake()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "depositStake(uint256)"(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    didVote(
      _disputeId: PromiseOrValue<BigNumberish>,
      _voter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    executeVote(
      _disputeId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    fee(overrides?: CallOverrides): Promise<BigNumber>;

    feedsWithFunding(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fundFeed(
      _feedId: PromiseOrValue<BytesLike>,
      _queryId: PromiseOrValue<BytesLike>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getAddressVars(
      _data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAllDisputeVars(
      _disputeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBlockNumberByTimestamp(
      _queryId: PromiseOrValue<BytesLike>,
      _timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCurrentFeeds(
      _queryId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCurrentReward(
      _queryId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCurrentTip(
      _queryId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCurrentValue(
      _queryId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDataAfter(
      _queryId: PromiseOrValue<BytesLike>,
      _timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDataBefore(
      _queryId: PromiseOrValue<BytesLike>,
      _timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDataFeed(
      _feedId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDelegateInfo(
      _holder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDisputeIdByDisputeHash(
      _hash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDisputeInfo(
      _disputeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDisputeUintVars(
      _disputeId: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFundedFeeds(overrides?: CallOverrides): Promise<BigNumber>;

    getFundedQueryIds(overrides?: CallOverrides): Promise<BigNumber>;

    getIndexForDataAfter(
      _queryId: PromiseOrValue<BytesLike>,
      _timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getIndexForDataBefore(
      _queryId: PromiseOrValue<BytesLike>,
      _timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLastNewValueById(
      _requestId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMultipleValuesBefore(
      _queryId: PromiseOrValue<BytesLike>,
      _timestamp: PromiseOrValue<BigNumberish>,
      _maxAge: PromiseOrValue<BigNumberish>,
      _maxCount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNewCurrentVariables(overrides?: CallOverrides): Promise<BigNumber>;

    getNewValueCountbyQueryId(
      _queryId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNewValueCountbyRequestId(
      _requestId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOpenDisputesOnId(
      _queryId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPastTipByIndex(
      _queryId: PromiseOrValue<BytesLike>,
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPastTipCount(
      _queryId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPastTips(
      _queryId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getQueryIdFromFeedId(
      _feedId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReportTimestampByIndex(
      _queryId: PromiseOrValue<BytesLike>,
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReporterByTimestamp(
      _queryId: PromiseOrValue<BytesLike>,
      _timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReporterLastTimestamp(
      _reporter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReportingLock(overrides?: CallOverrides): Promise<BigNumber>;

    getReportsSubmittedByAddress(
      _reporter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRewardAmount(
      _feedId: PromiseOrValue<BytesLike>,
      _queryId: PromiseOrValue<BytesLike>,
      _timestamps: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRewardClaimedStatus(
      _feedId: PromiseOrValue<BytesLike>,
      _queryId: PromiseOrValue<BytesLike>,
      _timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStakerInfo(
      _staker: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTimeBasedReward(overrides?: CallOverrides): Promise<BigNumber>;

    getTimeOfLastNewValue(overrides?: CallOverrides): Promise<BigNumber>;

    getTimestampCountById(
      _queryId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTimestampIndexByTimestamp(
      _queryId: PromiseOrValue<BytesLike>,
      _timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTimestampbyQueryIdandIndex(
      _queryId: PromiseOrValue<BytesLike>,
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTimestampbyRequestIDandIndex(
      _requestId: PromiseOrValue<BigNumberish>,
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTipsByAddress(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTipsById(
      _queryId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTipsByUser(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUintVar(
      _data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getValueByTimestamp(
      _queryId: PromiseOrValue<BytesLike>,
      _timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVoteCount(overrides?: CallOverrides): Promise<BigNumber>;

    getVoteInfo(
      _disputeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVoteRounds(
      _hash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    governance(overrides?: CallOverrides): Promise<BigNumber>;

    init(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isApprovedGovernanceContract(
      _contract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isFunctionApproved(
      _func: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isInDispute(
      _queryId: PromiseOrValue<BytesLike>,
      _timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isMigrated(
      _addy: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    killContract(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    migrate(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    migrateFor(
      _destination: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    mint(
      _reciever: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    proposeVote(
      _contract: PromiseOrValue<string>,
      _function: PromiseOrValue<BytesLike>,
      _data: PromiseOrValue<BytesLike>,
      _timestamp: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    queryIdFromDataFeedId(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    queryIdsWithFunding(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    queryIdsWithFundingIndex(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeValue(
      _queryId: PromiseOrValue<BytesLike>,
      _timestamp: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    reportingLock(overrides?: CallOverrides): Promise<BigNumber>;

    "requestStakingWithdraw()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "requestStakingWithdraw(uint256)"(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    rescue51PercentAttack(
      _tokenHolder: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    rescueBrokenDataReporting(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    rescueFailedUpdate(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "retrieveData(uint256,uint256)"(
      _requestId: PromiseOrValue<BigNumberish>,
      _timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "retrieveData(bytes32,uint256)"(
      _queryId: PromiseOrValue<BytesLike>,
      _timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setApprovedFunction(
      _func: PromiseOrValue<BytesLike>,
      _val: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setupDataFeed(
      _queryId: PromiseOrValue<BytesLike>,
      _reward: PromiseOrValue<BigNumberish>,
      _startTime: PromiseOrValue<BigNumberish>,
      _interval: PromiseOrValue<BigNumberish>,
      _window: PromiseOrValue<BigNumberish>,
      _priceThreshold: PromiseOrValue<BigNumberish>,
      _rewardIncreasePerSecond: PromiseOrValue<BigNumberish>,
      _queryData: PromiseOrValue<BytesLike>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    slashReporter(
      _reporter: PromiseOrValue<string>,
      _disputer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    submitValue(
      _queryId: PromiseOrValue<BytesLike>,
      _value: PromiseOrValue<BytesLike>,
      _nonce: PromiseOrValue<BigNumberish>,
      _queryData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    tallyVotes(
      _disputeId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    tellor(overrides?: CallOverrides): Promise<BigNumber>;

    tip(
      _queryId: PromiseOrValue<BytesLike>,
      _amount: PromiseOrValue<BigNumberish>,
      _queryData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    tipQuery(
      _queryId: PromiseOrValue<BytesLike>,
      _tip: PromiseOrValue<BigNumberish>,
      _queryData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    tips(
      arg0: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferFrom(
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    uints(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updateMinDisputeFee(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    userTipsTotal(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    valueFor(
      _id: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    verify(overrides?: CallOverrides): Promise<BigNumber>;

    vote(
      _disputeId: PromiseOrValue<BigNumberish>,
      _supports: PromiseOrValue<boolean>,
      _invalidQuery: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    voteFor(
      _addys: PromiseOrValue<string>[],
      _disputeId: PromiseOrValue<BigNumberish>,
      _supports: PromiseOrValue<boolean>,
      _invalidQuery: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawStake(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    _sliceUint(
      _b: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addStakingRewards(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addresses(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allowance(
      _user: PromiseOrValue<string>,
      _spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allowedToTrade(
      _user: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      _spender: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    approveAndTransferFrom(
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOfAt(
      _user: PromiseOrValue<string>,
      _blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    beginDispute(
      _queryId: PromiseOrValue<BytesLike>,
      _timestamp: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    burn(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    burnTips(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    changeAddressVar(
      _id: PromiseOrValue<BytesLike>,
      _addy: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    changeDeity(
      _newDeity: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    changeOwner(
      _newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    changeReportingLock(
      _newReportingLock: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    changeStakingStatus(
      _reporter: PromiseOrValue<string>,
      _status: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    changeTimeBasedReward(
      _newTimeBasedReward: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    changeUint(
      _target: PromiseOrValue<BytesLike>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimOneTimeTip(
      _queryId: PromiseOrValue<BytesLike>,
      _timestamps: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimTip(
      _feedId: PromiseOrValue<BytesLike>,
      _queryId: PromiseOrValue<BytesLike>,
      _timestamps: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    delegate(
      _delegate: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    delegateOfAt(
      _user: PromiseOrValue<string>,
      _blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "depositStake()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "depositStake(uint256)"(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    didVote(
      _disputeId: PromiseOrValue<BigNumberish>,
      _voter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    executeVote(
      _disputeId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    fee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feedsWithFunding(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fundFeed(
      _feedId: PromiseOrValue<BytesLike>,
      _queryId: PromiseOrValue<BytesLike>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getAddressVars(
      _data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAllDisputeVars(
      _disputeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBlockNumberByTimestamp(
      _queryId: PromiseOrValue<BytesLike>,
      _timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurrentFeeds(
      _queryId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurrentReward(
      _queryId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurrentTip(
      _queryId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurrentValue(
      _queryId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDataAfter(
      _queryId: PromiseOrValue<BytesLike>,
      _timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDataBefore(
      _queryId: PromiseOrValue<BytesLike>,
      _timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDataFeed(
      _feedId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDelegateInfo(
      _holder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDisputeIdByDisputeHash(
      _hash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDisputeInfo(
      _disputeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDisputeUintVars(
      _disputeId: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFundedFeeds(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getFundedQueryIds(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getIndexForDataAfter(
      _queryId: PromiseOrValue<BytesLike>,
      _timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getIndexForDataBefore(
      _queryId: PromiseOrValue<BytesLike>,
      _timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLastNewValueById(
      _requestId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMultipleValuesBefore(
      _queryId: PromiseOrValue<BytesLike>,
      _timestamp: PromiseOrValue<BigNumberish>,
      _maxAge: PromiseOrValue<BigNumberish>,
      _maxCount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNewCurrentVariables(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNewValueCountbyQueryId(
      _queryId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNewValueCountbyRequestId(
      _requestId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOpenDisputesOnId(
      _queryId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPastTipByIndex(
      _queryId: PromiseOrValue<BytesLike>,
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPastTipCount(
      _queryId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPastTips(
      _queryId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getQueryIdFromFeedId(
      _feedId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReportTimestampByIndex(
      _queryId: PromiseOrValue<BytesLike>,
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReporterByTimestamp(
      _queryId: PromiseOrValue<BytesLike>,
      _timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReporterLastTimestamp(
      _reporter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReportingLock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getReportsSubmittedByAddress(
      _reporter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRewardAmount(
      _feedId: PromiseOrValue<BytesLike>,
      _queryId: PromiseOrValue<BytesLike>,
      _timestamps: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRewardClaimedStatus(
      _feedId: PromiseOrValue<BytesLike>,
      _queryId: PromiseOrValue<BytesLike>,
      _timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStakerInfo(
      _staker: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTimeBasedReward(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTimeOfLastNewValue(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTimestampCountById(
      _queryId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTimestampIndexByTimestamp(
      _queryId: PromiseOrValue<BytesLike>,
      _timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTimestampbyQueryIdandIndex(
      _queryId: PromiseOrValue<BytesLike>,
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTimestampbyRequestIDandIndex(
      _requestId: PromiseOrValue<BigNumberish>,
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTipsByAddress(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTipsById(
      _queryId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTipsByUser(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUintVar(
      _data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getValueByTimestamp(
      _queryId: PromiseOrValue<BytesLike>,
      _timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVoteCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getVoteInfo(
      _disputeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVoteRounds(
      _hash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    governance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    init(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isApprovedGovernanceContract(
      _contract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isFunctionApproved(
      _func: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isInDispute(
      _queryId: PromiseOrValue<BytesLike>,
      _timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isMigrated(
      _addy: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    killContract(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    migrate(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    migrateFor(
      _destination: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    mint(
      _reciever: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proposeVote(
      _contract: PromiseOrValue<string>,
      _function: PromiseOrValue<BytesLike>,
      _data: PromiseOrValue<BytesLike>,
      _timestamp: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    queryIdFromDataFeedId(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    queryIdsWithFunding(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    queryIdsWithFundingIndex(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeValue(
      _queryId: PromiseOrValue<BytesLike>,
      _timestamp: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    reportingLock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "requestStakingWithdraw()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "requestStakingWithdraw(uint256)"(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    rescue51PercentAttack(
      _tokenHolder: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    rescueBrokenDataReporting(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    rescueFailedUpdate(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "retrieveData(uint256,uint256)"(
      _requestId: PromiseOrValue<BigNumberish>,
      _timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "retrieveData(bytes32,uint256)"(
      _queryId: PromiseOrValue<BytesLike>,
      _timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setApprovedFunction(
      _func: PromiseOrValue<BytesLike>,
      _val: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setupDataFeed(
      _queryId: PromiseOrValue<BytesLike>,
      _reward: PromiseOrValue<BigNumberish>,
      _startTime: PromiseOrValue<BigNumberish>,
      _interval: PromiseOrValue<BigNumberish>,
      _window: PromiseOrValue<BigNumberish>,
      _priceThreshold: PromiseOrValue<BigNumberish>,
      _rewardIncreasePerSecond: PromiseOrValue<BigNumberish>,
      _queryData: PromiseOrValue<BytesLike>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    slashReporter(
      _reporter: PromiseOrValue<string>,
      _disputer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    submitValue(
      _queryId: PromiseOrValue<BytesLike>,
      _value: PromiseOrValue<BytesLike>,
      _nonce: PromiseOrValue<BigNumberish>,
      _queryData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tallyVotes(
      _disputeId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    tellor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tip(
      _queryId: PromiseOrValue<BytesLike>,
      _amount: PromiseOrValue<BigNumberish>,
      _queryData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    tipQuery(
      _queryId: PromiseOrValue<BytesLike>,
      _tip: PromiseOrValue<BigNumberish>,
      _queryData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    tips(
      arg0: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    uints(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateMinDisputeFee(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    userTipsTotal(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    valueFor(
      _id: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    verify(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vote(
      _disputeId: PromiseOrValue<BigNumberish>,
      _supports: PromiseOrValue<boolean>,
      _invalidQuery: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    voteFor(
      _addys: PromiseOrValue<string>[],
      _disputeId: PromiseOrValue<BigNumberish>,
      _supports: PromiseOrValue<boolean>,
      _invalidQuery: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawStake(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
