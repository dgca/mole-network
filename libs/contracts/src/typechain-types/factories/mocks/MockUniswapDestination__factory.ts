/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  MockUniswapDestination,
  MockUniswapDestinationInterface,
} from "../../mocks/MockUniswapDestination";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_scribe",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "ethPriceInUsd",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getEthPriceInUsd",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getPayload",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "_data",
        type: "bytes",
      },
    ],
    name: "handleReceive",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "_data",
        type: "bytes",
      },
    ],
    name: "handleWebApi",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "payload",
    outputs: [
      {
        internalType: "uint256",
        name: "calledCount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "blockNumber",
        type: "uint256",
      },
      {
        internalType: "int256",
        name: "amount0",
        type: "int256",
      },
      {
        internalType: "int256",
        name: "amount1",
        type: "int256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "scribe",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5060405161080d38038061080d833981810160405281019061003291906100db565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050610108565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100a88261007d565b9050919050565b6100b88161009d565b81146100c357600080fd5b50565b6000815190506100d5816100af565b92915050565b6000602082840312156100f1576100f0610078565b5b60006100ff848285016100c6565b91505092915050565b6106f6806101176000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c8063b3ac72f61161005b578063b3ac72f6146100e2578063d67b98a914610100578063e08125f71461011e578063e34381a11461013a5761007d565b80632cae8ae414610082578063683e0bcd146100a3578063a878f858146100c1575b600080fd5b61008a610156565b60405161009a94939291906103b9565b60405180910390f35b6100ab610181565b6040516100b891906103fe565b60405180910390f35b6100c9610187565b6040516100d994939291906103b9565b60405180910390f35b6100ea6101a5565b6040516100f7919061045a565b60405180910390f35b6101086101c9565b60405161011591906103fe565b60405180910390f35b610138600480360381019061013391906104e4565b6101d3565b005b610154600480360381019061014f91906104e4565b610280565b005b6000806000806001600001546001800154600160020154600160030154935093509350935090919293565b60055481565b60018060000154908060010154908060020154908060030154905084565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600554905090565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610261576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610258906105b4565b60405180910390fd5b600082828101906102729190610600565b905080600581905550505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461030e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610305906105b4565b60405180910390fd5b60008060008085858101906103239190610659565b9350935093509350600060405180608001604052808681526020018581526020018481526020018381525090508060016000820151816000015560208201518160010155604082015181600201556060820151816003015590505050505050505050565b6000819050919050565b61039a81610387565b82525050565b6000819050919050565b6103b3816103a0565b82525050565b60006080820190506103ce6000830187610391565b6103db6020830186610391565b6103e860408301856103aa565b6103f560608301846103aa565b95945050505050565b60006020820190506104136000830184610391565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061044482610419565b9050919050565b61045481610439565b82525050565b600060208201905061046f600083018461044b565b92915050565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b60008083601f8401126104a4576104a361047f565b5b8235905067ffffffffffffffff8111156104c1576104c0610484565b5b6020830191508360018202830111156104dd576104dc610489565b5b9250929050565b600080602083850312156104fb576104fa610475565b5b600083013567ffffffffffffffff8111156105195761051861047a565b5b6105258582860161048e565b92509250509250929050565b600082825260208201905092915050565b7f4d6f636b44657374696e6174696f6e3a204f6e6c79207363726962652063616e60008201527f2063616c6c20746869732066756e6374696f6e00000000000000000000000000602082015250565b600061059e603383610531565b91506105a982610542565b604082019050919050565b600060208201905081810360008301526105cd81610591565b9050919050565b6105dd81610387565b81146105e857600080fd5b50565b6000813590506105fa816105d4565b92915050565b60006020828403121561061657610615610475565b5b6000610624848285016105eb565b91505092915050565b610636816103a0565b811461064157600080fd5b50565b6000813590506106538161062d565b92915050565b6000806000806080858703121561067357610672610475565b5b6000610681878288016105eb565b9450506020610692878288016105eb565b93505060406106a387828801610644565b92505060606106b487828801610644565b9150509295919450925056fea264697066735822122058bd08c587fb9002e0d77e615053acf6adbb62619809175dca7f33af7d46776164736f6c63430008110033";

type MockUniswapDestinationConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockUniswapDestinationConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockUniswapDestination__factory extends ContractFactory {
  constructor(...args: MockUniswapDestinationConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _scribe: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MockUniswapDestination> {
    return super.deploy(
      _scribe,
      overrides || {}
    ) as Promise<MockUniswapDestination>;
  }
  override getDeployTransaction(
    _scribe: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_scribe, overrides || {});
  }
  override attach(address: string): MockUniswapDestination {
    return super.attach(address) as MockUniswapDestination;
  }
  override connect(signer: Signer): MockUniswapDestination__factory {
    return super.connect(signer) as MockUniswapDestination__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockUniswapDestinationInterface {
    return new utils.Interface(_abi) as MockUniswapDestinationInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockUniswapDestination {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as MockUniswapDestination;
  }
}
