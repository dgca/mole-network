/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  MockTellorProxy,
  MockTellorProxyInterface,
} from "../../mocks/MockTellorProxy";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_scribe",
        type: "address",
      },
      {
        internalType: "address",
        name: "_tellor",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "SubmitValueFailed",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "_data",
        type: "bytes",
      },
    ],
    name: "handleTellorData",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "scribe",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "tellor",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506040516109dd3803806109dd8339818101604052810190610032919061011d565b816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505061015d565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100ea826100bf565b9050919050565b6100fa816100df565b811461010557600080fd5b50565b600081519050610117816100f1565b92915050565b60008060408385031215610134576101336100ba565b5b600061014285828601610108565b925050602061015385828601610108565b9150509250929050565b6108718061016c6000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80630be058ae146100465780631959ad5b14610062578063b3ac72f614610080575b600080fd5b610060600480360381019061005b9190610360565b61009e565b005b61006a61029d565b60405161007791906103ee565b60405180910390f35b6100886102c3565b60405161009591906103ee565b60405180910390f35b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461012c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101239061048c565b60405180910390fd5b60008060008085858101906101419190610659565b93509350935093506000733251838bd813fdf6a97d32781e011cce8d225d5973ffffffffffffffffffffffffffffffffffffffff168585858560405160240161018d9493929190610795565b6040516020818303038152906040527f5eaa9ced000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516102179190610824565b6000604051808303816000865af19150503d8060008114610254576040519150601f19603f3d011682016040523d82523d6000602084013e610259565b606091505b5050905080610294576040517f816a50f200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50505050505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b60008083601f8401126103205761031f6102fb565b5b8235905067ffffffffffffffff81111561033d5761033c610300565b5b60208301915083600182028301111561035957610358610305565b5b9250929050565b60008060208385031215610377576103766102f1565b5b600083013567ffffffffffffffff811115610395576103946102f6565b5b6103a18582860161030a565b92509250509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006103d8826103ad565b9050919050565b6103e8816103cd565b82525050565b600060208201905061040360008301846103df565b92915050565b600082825260208201905092915050565b7f4d6f636b44657374696e6174696f6e3a204f6e6c79207363726962652063616e60008201527f2063616c6c20746869732066756e6374696f6e00000000000000000000000000602082015250565b6000610476603383610409565b91506104818261041a565b604082019050919050565b600060208201905081810360008301526104a581610469565b9050919050565b6000819050919050565b6104bf816104ac565b81146104ca57600080fd5b50565b6000813590506104dc816104b6565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610530826104e7565b810181811067ffffffffffffffff8211171561054f5761054e6104f8565b5b80604052505050565b60006105626102e7565b905061056e8282610527565b919050565b600067ffffffffffffffff82111561058e5761058d6104f8565b5b610597826104e7565b9050602081019050919050565b82818337600083830152505050565b60006105c66105c184610573565b610558565b9050828152602081018484840111156105e2576105e16104e2565b5b6105ed8482856105a4565b509392505050565b600082601f83011261060a576106096102fb565b5b813561061a8482602086016105b3565b91505092915050565b6000819050919050565b61063681610623565b811461064157600080fd5b50565b6000813590506106538161062d565b92915050565b60008060008060808587031215610673576106726102f1565b5b6000610681878288016104cd565b945050602085013567ffffffffffffffff8111156106a2576106a16102f6565b5b6106ae878288016105f5565b93505060406106bf87828801610644565b925050606085013567ffffffffffffffff8111156106e0576106df6102f6565b5b6106ec878288016105f5565b91505092959194509250565b610701816104ac565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610741578082015181840152602081019050610726565b60008484015250505050565b600061075882610707565b6107628185610712565b9350610772818560208601610723565b61077b816104e7565b840191505092915050565b61078f81610623565b82525050565b60006080820190506107aa60008301876106f8565b81810360208301526107bc818661074d565b90506107cb6040830185610786565b81810360608301526107dd818461074d565b905095945050505050565b600081905092915050565b60006107fe82610707565b61080881856107e8565b9350610818818560208601610723565b80840191505092915050565b600061083082846107f3565b91508190509291505056fea2646970667358221220df4cd912c2c6b2df899c0f713f855455c493457f5199532585133ebb3c5e6daf64736f6c63430008110033";

type MockTellorProxyConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockTellorProxyConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockTellorProxy__factory extends ContractFactory {
  constructor(...args: MockTellorProxyConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _scribe: PromiseOrValue<string>,
    _tellor: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MockTellorProxy> {
    return super.deploy(
      _scribe,
      _tellor,
      overrides || {}
    ) as Promise<MockTellorProxy>;
  }
  override getDeployTransaction(
    _scribe: PromiseOrValue<string>,
    _tellor: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_scribe, _tellor, overrides || {});
  }
  override attach(address: string): MockTellorProxy {
    return super.attach(address) as MockTellorProxy;
  }
  override connect(signer: Signer): MockTellorProxy__factory {
    return super.connect(signer) as MockTellorProxy__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockTellorProxyInterface {
    return new utils.Interface(_abi) as MockTellorProxyInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockTellorProxy {
    return new Contract(address, _abi, signerOrProvider) as MockTellorProxy;
  }
}
